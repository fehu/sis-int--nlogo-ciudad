__includes[ "city-roads.nls" 
            "city-roads-info.nls"
            "city-crosses.nls" ]

;globals [ car-colors ]


breed [ cars car ]


;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; 
;; CARS

to new-cars [ n ]
  create-cars n [ 
        set color cars-color ;(random-choice car-colors) 

        let lane select-line-start
        if lane = [] [ error "couldn't find a free street begining to place a car" ]
        
        go-to-pcor  get-road-cor lane
        set heading get-road-dir lane
        
        jump select-distance-to-jump
    ]
end

to-report select-distance-to-jump
  let x ifelse-value v-dir? heading
              [ random world-height ][
        ifelse-value h-dir? heading 
              [ random world-width ]
              [ [] ]
      ]
    
    
  let p patch-ahead x 
  
  ifelse is-road?   p and 
     not is-cross?  p and
         no-cars-at p and
         [road-direction] of p = heading
    [ report x ]
    [ report select-distance-to-jump ]

end

to-report select-line-start
  report select-line-start' shuffle roads-info
end

to-report select-line-start' [ to-try ]
  ifelse empty? to-try
        [ report [] ]
        [ 
          let lane random-choice roads-info
          let lane-start get-road-cor lane
          
          ifelse no-cars-at patch-at-cor lane-start
                [ report lane ]
                [ report select-line-start' but-first to-try ]
           ]
end


;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; 
;; TRAFFIC RULES


to-report permitted-moves
  ifelse not [is-road] of patch-here 
        [ 
          print "out of the road"
          report "out"
        ]
        [
          report ifelse-value [is-cross] of patch-here
                       [ permitted-moves-on-cross ]
                       [ permitted-moves-on-road  ]
          ]
  
end

to-report permitted-moves-on-road
  let moves []
  
  let ahead patch-ahead 1
  
  ifelse is-cross? ahead
         [ 
           let x semafor-open-for-me ahead 
;           print word "semafor-open-for-me ahead: " x
           if x and no-cars ahead
             [ set moves lput "f" moves ]
            ]
         [
           if no-cars ahead
             [ set moves lput "f" moves ]
           ]
         
;; There are no roads like this anyway

;  let r-ahead patch-right-and-ahead 45 1
;  let l-ahead patch-left-and-ahead 45 1
  
  
;  if permitted-moves-on-road-lane-change r-ahead [ set moves lput "r" moves ]
;  if permitted-moves-on-road-lane-change l-ahead [ set moves lput "l" moves ]
  
  report moves
end

;to-report permitted-moves-on-road-lane-change [ patch' ]
;  report is-road?  patch' and
;     not is-cross? patch' and 
;         [road-direction] of patch-here = [road-direction] of patch' and
;         no-cars   patch'
;end



to-report permitted-moves-on-cross
  let can filter [ is-outgoing? (item 0 ?1) (item 1 ?1) and no-cars-at (item 1 ?1) ]
                 map [ list (towards ?1) ?1 ]
                     agentset-to-list neighbors4
  report map [ relative-direction (item 0 ?1) ] can
end

;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; 

to-report no-cars [ patch' ]
  report no-cars-at patch'
end

to-report no-cars-at [ patch' ]
  report count cars-on patch' = 0
end

to-report relative-direction [ dir ]
  let d dir - heading 
  let r  ifelse-value (d = 0)
               [ "f" ][
         ifelse-value (d = 90  or d = -270)
               [ "r" ][
         ifelse-value (d = 270 or d = -90)
               [ "l" ][
         ifelse-value (d = 180 or d = -180)
               [ "b" ]
               [ ""  ]
               ]]]
  if r = "" [ error word "cannot get relative-direction for " (dir - heading) ]
  report r
end