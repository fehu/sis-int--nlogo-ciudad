globals [ -debug- ]


to debug [ msg ]
  if -debug- [ print msg ]
end



to assert [b msg]
  if not b [ error msg ]
end


;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; 
;; random choice
to-report random-choice [ l ]
  report first shuffle l
end

;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; 
;; find first
to-report find [ what-f where ]
  let f filter what-f where
  ifelse length f > 0 [ report (list first f)]
                      [ report [] ]
end


to-report contains? [ x lst ]
  report not ( position x lst = false ) ; cannot apply (position x lst) directly to not
end

;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; 
;; get the element from list if it's the only one
to-report get-opt [ opt ]
  if length opt = 1 [ report first opt ]
  if length opt > 1 [ error "not an option" ]
  error "empty option"
end

;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; 
;; is-edge?
to-report is-edge? [ a ]
  report [pxcor] of a = max-pxcor or [pxcor] of a = min-pxcor or
         [pycor] of a = max-pycor or [pycor] of a = min-pycor
end

;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; 
;; directions

to-report North 
  report 0
end

to-report East
  report 90
end

to-report South
  report 180
end

to-report West
  report 270
end


;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; 
;; vertical direction?
to-report v-dir? [ d ]
  report (remainder d 180) = 0
end

;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; 
;; horizontal direction?
to-report h-dir? [ d ]
  report (remainder d 90) = 0 and not v-dir? d
end

;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; 
;; direction to string
to-report dir2str [ dir ]
  report ifelse-value (dir = North)
               [ "North" ][
         ifelse-value (dir = East)
               [ "East" ][ 
         ifelse-value (dir = South)
               [ "South" ][ 
         ifelse-value (dir = West)
               [ "West" ]
               [ word dir " degrees" ]
                 ]]]
end


;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; 

to-report pcor-of [ p ]
  report list ([pxcor] of p) ([pycor] of p)
end

to-report patch-at-cor [ cor ]
  assert (length cor = 2) "not a coordinates list"
  report patch (first cor) (last cor)
end

to-report second [ l ]
  report item 1 l
end

;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; 
;; agentsets

; careful ! with caller context
to-report map-agentset [ aset f ]
  let result []
  ask aset [ set result lput (runresult f self) result ] 
  report result
end

to-report agentset-to-list [ aset ]
  let result []
  ask aset [ set result lput self result ] 
  report result
end

to-report filter-agentset [ aset cond ]
  let result []
  ask aset [ if (runresult cond self) [ set result lput self result ] ]
  report result
end

to-report map-agentset-with-filter [ aset cond f ]
  let result []
  ask aset [ if (runresult cond self) [ set result lput (runresult f self) result ] ]
  report result
end

;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; 
;; lists

to-report concat [l1 l2]
  ifelse empty? l2
         [ report l1 ]
         [ 
           let l1' lput (first l2) l1  
           report concat l1' (but-first l2)      
         ]
end


to-report fold-left [ f i l ]
  report fold-left-inner f l i
end

to-report fold-left-inner [ f l acc ]
  ifelse empty? l 
         [ report acc ]
         [ 
           let l'   but-first l
           let acc' (runresult f acc (first l))
           
           report fold-left-inner f l' acc'
           ]
end


to-report concat-map [ f l ]
  report fold-left task [ concat ?1 (runresult f ?2) ]
                   []
                   l
;  report reduce [ concat ?1 (runresult f ?2) ] l
end

