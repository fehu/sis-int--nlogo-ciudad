__includes[ "city-roads.nls" 
            "city-roads-info.nls" 
            "city-crosses.nls" 
            "utils.nls" ]

globals [ max-street-distance-v     max-street-distance-h
          min-street-distance-v     min-street-distance-h
          
          perimeter-margin          avenues-choice-mode
          show-road-begin?          fill-street-name?
  
          street-north-east-color   street-south-west-color   street-cross-color
          delta-street-distance-v   delta-street-distance-h
          last-road-name-v          last-road-name-h
          
          -counter-
  ]

breed [ road-builder road-builders ]


road-builder-own [ 
  last-turns
  known-street-distances-v
  known-street-distances-h
  ]



to set-default-world-shape
  resize-world -100 100 -50 50
  set-patch-size 8
end



to setup-road-builder
  create-road-builder 1
  ask road-builder[ set color red ]
end


to setup-world-default
  set street-north-east-color [ 238 232 170 ] ;[189 183 107]
  set street-south-west-color [ 173 216 230 ] ;[100 149 237]
  set street-cross-color      gray
end


to setup-build
  
  set delta-street-distance-v max-street-distance-v - min-street-distance-v
  assert delta-street-distance-v >= 0 "max-street-distance-v must be greater than min-street-distance-v"

  set delta-street-distance-h max-street-distance-h - min-street-distance-h
  assert delta-street-distance-h >= 0 "max-street-distance-h must be greater than min-street-distance-h"

  set last-road-name-v 0
  set last-road-name-h 0

  set roads-info []
  set crosses-info []
  
  ask patches [ set is-road false ]
end


;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; 
;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;;
;;
;; CROSSES

to build-semafors
  build-semafors' (map get-cross-cor crosses-info)  
end

to build-semafors' [ crosses-cor ]
  if not empty? crosses-cor
    [
     let cor  first crosses-cor
     let ag-opt get-cross-agent get-opt cross-by-cor cor
     if empty? ag-opt 
        [ 
          let merged merge-crosses patch-at-cor cor
          debug word "new-semafor for " merged
          new-semafor merged
         ]
     build-semafors' (but-first crosses-cor)
    ]
end


to-report merge-crosses [ initial-cross ]
  report remove-duplicates merge-crosses-inner initial-cross []
end

to-report merge-crosses-inner [ initial-cross acc ]
  let cross-neighbours filter-agentset ([neighbors4] of initial-cross) task [ is-cross? ?1 ]
  let neighbours filter [not contains? ?1 acc] cross-neighbours
  let acc' concat (lput initial-cross acc) neighbours
  
  let neighbouring-crosses concat-map task [ merge-crosses-inner ?1 acc' ] neighbours
  
  report fput initial-cross neighbouring-crosses
end


;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; 
;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;;
;;
;; ROADS

to build-roads
  
  ask road-builder [ 
    
    build-perimeter 
    set last-turns []
    
    build-streets-grid
    
    build-avenues
    
    ]
  
end

to build-perimeter'
  ask road-builder [ build-perimeter
                     set last-turns []
                   ]
end

to next-street'
  ask road-builder [ let x next-street ]
end

to build-streets-grid'
  ask road-builder [ build-streets-grid ]
end

to build-avenues'
  ask road-builder [ build-avenues ]
end

;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; 
;; transforms some of the existing roads to two-lanes
to build-avenues
  establish-dist2prev-cw
  
  let selected select-avenues
  let av-h first selected
  let av-v last  selected
  
  debug sentence "selected avenues: " selected
  
  foreach (sentence av-h av-v) [ build-avenue ?1 2 ]
end

to build-avenue [ inf lane ]
  set xcor    get-road-x inf
  set ycor    get-road-y inf
  set heading get-road-dir inf
  
  move task [ not is-road? patch-ahead 1 ] 
       task [ ]
;  fd 1
  lt 90
  fd 1
;  if cross-here? [ fd 1 ]
  lt 90
  
  let name get-road-name inf
  let short get-road-short-name inf
  
  build-cross-here name
    
  mem-road-here-ccw name short lane 0
  move-building-road name short
  
  fd 1
  build-cross-here name
end

to-report select-avenues-do [ av ]
  report ifelse-value (avenues-choice-mode = "1/3 of the most distant")
               [ sublist av 0 (length av / 3) ][
         ifelse-value (avenues-choice-mode = "1/3 random from 1/2 most distant")
               [ sublist (shuffle sublist av 0 (length av / 2)) 0 (length av / 3) ]
               [ [] ]
              ]
end

to-report select-avenues
  let av-h sort-by-prev-dist (filter [h-dir? get-road-dir ?1] roads-info)
  let av-v sort-by-prev-dist (filter [v-dir? get-road-dir ?1] roads-info)
  
  let av-h-m select-avenues-do av-h
  let av-v-m select-avenues-do av-v

  report list av-h-m av-v-m
                   
end

to-report sort-by-prev-dist [ infs ]
  report sort-by [sort-by-prev-dist-inner ?1 > sort-by-prev-dist-inner ?2] infs
  
end

to-report sort-by-prev-dist-inner [ inf ]
  report max get-road-dists2prev inf
end 


;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; 
;; builds a grid of one-lane streets
to build-streets-grid
  
  ; build vertical streets
  build-streets-grid-half
  ; build horizontal streets
  build-streets-grid-half
  
end

to build-streets-grid-half
  if next-street [ build-streets-grid-half ]
end


;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; 
;; builds the next street in a "snake" manner
to-report next-street
  let to-jump random-next-street-distance heading
  if to-jump < 0 [ error "not a n*pi/2 direction" ]
  
  let dp distance-to-perimeter
  if dp = -1 [ error "cannot handle angles different n*pi/2" ]
  
  
  ifelse to-jump > dp - min-street-distance heading
     [;THEN
       jump dp
       next-street-turn
       
       if first last-turns = "L" [ set last-turns ["L"] ]
       if first last-turns = "R" [ set last-turns ["R"] ]
       
       report false
      ]
     
     [;ELSE
       jump to-jump 
  
       let name next-street-name heading
       let short substring name 2 (length name)
  
       next-street-turn
       build-cross-here name
       mem-road-here-ccw name short 1 to-jump
       
       if show-road-begin? [ ask patch-ahead -1 [ set plabel name ] ]
       
       move-building-road name short
       
       fd 1
       build-cross-here name
       set-cross-names-here name [road-name] of patch-ahead -1
       next-street-turn
       
       report true
      ]
  
end

to move-building-road [ name short-name ]
  move task [ is-perimeter? patch-ahead 1 ]
       task [ 
              ifelse is-road? patch-here 
                    [ build-cross-here name ] 
                    [ build-road-here name short-name ]
         ]
end

to-report next-street-name [ dir ]
  if v-dir? dir [ set last-road-name-v last-road-name-v + 1 
                  report word "h-" last-road-name-v
                ]
  if h-dir? dir [ set last-road-name-h last-road-name-h + 1 
                  report word "v-" last-road-name-h
                ]
end

to-report random-next-street-distance [ dir ]
  report ifelse-value v-dir? dir
               [ min-street-distance-h + random delta-street-distance-h ][
         ifelse-value h-dir? dir
               [ min-street-distance-v + random delta-street-distance-v ]
               [ -1 ]
               ]
end


; next turn for snake-like turns (LLRRLLRRLL...)
to next-street-turn
  ifelse not empty? last-turns
        [ ifelse empty? but-first last-turns 
                [ if first last-turns = "L"
                     [ 
                       set last-turns ["L" "L"]
                       lt 90 
                       ]
                  if first last-turns = "R"
                     [ 
                       set last-turns ["R" "R"]
                       rt 90 
                       ]
                  ]
                [ let fst first last-turns
                  let snd first but-first last-turns
                  assert (fst = snd) "FAIL: *1"
                  
                  if fst = "L"
                     [ set last-turns ["R"]
                       rt 90
                        ]
                  if fst = "R"
                     [ set last-turns ["L"]
                       lt 90
                        ]
                   ]
          ]
        [ 
          ; initial turn: Left
          set last-turns ["L" "L"] 
          lt 90
          ]
  
end


;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; 
;; bulds road perimeter

; go to left-bottom corner (with margin 1)
to build-perimeter
  set-builder-to-initial-position

  set heading East ; random-choice (list North East) ; TODO HARDCODED
  
;  mem-road-here-ccw perimeter-name perimeter-short-name 1 0
  
  move task [ is-road? patch-ahead 1 ]
       task [ 
              let name perimeter-name 
              let short perimeter-short-name
              
              build-road-here name short
              
              if is-edge? patch-ahead perimeter-margin
                 [ build-cross-here name
                   lt 90 
                   let nme perimeter-name
                   mem-road-here-ccw nme perimeter-short-name 1 0
                   set-cross-names-here nme name
                   ]
            ]
  fd 1
  set road-name-v [road-name] of patch-ahead -1 ; TODO HARDCODED
end

to-report perimeter-name
  report (word "Perimeter-" dir2str heading-right)
end

to-report perimeter-short-name
  report first dir2str heading-right
end

to set-builder-to-initial-position
  set xcor min-pxcor + perimeter-margin
  set ycor min-pycor + perimeter-margin
end


to establish-dist2prev-cw
  set-builder-to-initial-position
  
  set heading 0 ; TODO - HARDCODED
  
  fd 1 
  
  set -counter- 0
  move task [ pxcor = min-pxcor + perimeter-margin and pycor = min-pycor + perimeter-margin ] 
       task [ ifelse cross-here?
                    [ set-road-dists2prev-cw get-cross-name-here -counter- 
                      debug word "set -counter- " -counter-
                      set -counter- 0
                      if not is-road? patch-ahead 1 [ rt 90 ]
                      ]
                    [ set -counter- (-counter- + 1) ]
           ]
  
end

to-report get-cross-name-here 
  debug sentence "road-name-v: " road-name-v
  debug sentence "road-name-h: " road-name-h
  
  let nme ifelse-value (v-dir? heading)
                     [ road-name-h ][
               ifelse-value (h-dir? heading)
                     [ road-name-v ]
                     [ "" ]
                     ]
  if empty? nme [ error "is not a cross" ]
  report nme
end

;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; 
;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;;
;;
;; COMMON



;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; 
;; build different roads

to build-road-here [ name short-name ]
  set is-road   true
  set is-cross  false
  set pcolor    street-color-to-paint heading
  
  set road-name name
  set road-short-name short-name
  set road-direction heading
  
  if fill-street-name? [ set plabel short-name ]
end

to set-cross-names-here [ current-street perpend-street ]
  set road-name-v ifelse-value v-dir? heading
                        [ current-street ]
                        [ perpend-street ]
  set road-name-h ifelse-value h-dir? heading
                        [ current-street ]
                        [ perpend-street ]
end

to build-cross-here [ current-street ] ; case new street
  set is-road  true
  set is-cross true
  set pcolor   street-cross-color
  
  let perpend-street [road-name] of patch-left-and-ahead 90 1 ;; TODO: HARCODED
  
  set plabel ""
  
  set-cross-names-here current-street perpend-street
  mem-empty-cross-here
end

to-report street-color-to-paint [ dir ]
  if dir = North or dir = East
     [ report street-north-east-color ]
  if dir = South or dir = West
     [ report street-south-west-color ]
  report []
end

;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; 
;; repeating tasks

to move [ until do ]
  fd 1
  run do

  if not (runresult until)
     [ move until do ]
end

;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; 
;; city orientation

to-report min-street-distance [ dir ]
  report ifelse-value v-dir? dir
               [ min-street-distance-h ][
         ifelse-value h-dir? dir
               [ min-street-distance-v  ]
               [ -1 ]
               ]
end

to-report distance-to-perimeter
  report simple-distance-to-edge - perimeter-margin
end

to-report simple-distance-to-edge
  report ifelse-value (heading = North)
               [ abs (max-pycor - pycor) ][
         ifelse-value (heading = East)
               [ abs (max-pxcor - pxcor) ][ 
         ifelse-value (heading = South)
               [ abs (min-pycor - pycor)  ][ 
         ifelse-value (heading = West)
               [ abs (min-pxcor - pxcor) ]
               [ -1 ]
                 ]]]
end


to-report is-perimeter? [ a ]
  report [pxcor] of a = max-pxcor - perimeter-margin or [pxcor] of a = min-pxcor + perimeter-margin or
         [pycor] of a = max-pycor - perimeter-margin or [pycor] of a = min-pycor + perimeter-margin
end

;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; 
;; misc

;to-report heading-left
;  let h heading - 90
;  report ifelse-value (h = -90)
;               [ 270 ]
;               [ h ]
;end


to-report heading-right
  let h heading + 90
  report ifelse-value (h = 360)
               [ 0 ]
               [ h ]
end
